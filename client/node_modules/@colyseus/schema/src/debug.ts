import * as fs from "fs";
import { Reflection, Decoder } from "./index";

const contents = fs.readFileSync("/Users/endel/Projects/colyseus/clients/bubbits/project/@bubbits/backend/schema-debug.txt", { encoding: "utf8" }).toString();

let isCommentBlock = false;
let lastComment = "";

let decoder: Decoder;

function getBuffer(line: string) {
    const start = line.lastIndexOf(":");
    const buffer = Buffer.from(new Uint8Array(line.substring(start + 1).split(",").map(n => Number(n))));
    console.log(`(${buffer.byteLength}) ${Array.from(buffer).join(",")}`)
    // console.log("");
    // console.log("");
    // console.log("> ", line);
    // console.log("> substring:", line.substring(start + 1))
    return buffer;
}

function decode(buffer: Buffer) {
    try {
        decoder.decode(buffer);
    } catch (e) {
        console.error(e);
        console.log("Last log:\n\n")
        console.log(lastComment);
    }
}

contents.split("\n").forEach((line) => {
    if (line.startsWith("#")) {
        // reset last comment.
        if (isCommentBlock === false) { lastComment = ""; }

        isCommentBlock = true;
        lastComment += line.substring(line.indexOf(":") + 1) + "\n";
        return;
    }

    isCommentBlock = false;

    if (line.startsWith("handshake:") && !decoder) {
        decoder = Reflection.decode(getBuffer(line));

    } else if (line.startsWith("state:")) {
        decode(getBuffer(line));

    } else if (line.startsWith("patch:")) {
        decode(getBuffer(line));
    }
});

console.log(decoder.state.toJSON());