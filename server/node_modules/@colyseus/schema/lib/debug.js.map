{"version":3,"file":"debug.js","sourceRoot":"","sources":["../src/debug.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,mCAA8C;AAE9C,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,0FAA0F,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;AAE9J,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,IAAI,WAAW,GAAG,EAAE,CAAC;AAErB,IAAI,OAAgB,CAAC;AAErB,SAAS,SAAS,CAAC,IAAY;IAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACpC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrG,OAAO,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,UAAU,KAAK,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IACrE,mBAAmB;IACnB,mBAAmB;IACnB,2BAA2B;IAC3B,yDAAyD;IACzD,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,MAAM,CAAC,MAAc;IAC1B,IAAI,CAAC;QACD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACT,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAC5B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;AACL,CAAC;AAED,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;IAClC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;QACvB,sBAAsB;QACtB,IAAI,cAAc,KAAK,KAAK,EAAE,CAAC;YAAC,WAAW,GAAG,EAAE,CAAC;QAAC,CAAC;QAEnD,cAAc,GAAG,IAAI,CAAC;QACtB,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QAC5D,OAAO;IACX,CAAC;IAED,cAAc,GAAG,KAAK,CAAC;IAEvB,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC5C,OAAO,GAAG,kBAAU,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAEjD,CAAC;SAAM,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QACnC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAE5B,CAAC;SAAM,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QACnC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC","sourcesContent":["import * as fs from \"fs\";\nimport { Reflection, Decoder } from \"./index\";\n\nconst contents = fs.readFileSync(\"/Users/endel/Projects/colyseus/clients/bubbits/project/@bubbits/backend/schema-debug.txt\", { encoding: \"utf8\" }).toString();\n\nlet isCommentBlock = false;\nlet lastComment = \"\";\n\nlet decoder: Decoder;\n\nfunction getBuffer(line: string) {\n    const start = line.lastIndexOf(\":\");\n    const buffer = Buffer.from(new Uint8Array(line.substring(start + 1).split(\",\").map(n => Number(n))));\n    console.log(`(${buffer.byteLength}) ${Array.from(buffer).join(\",\")}`)\n    // console.log(\"\");\n    // console.log(\"\");\n    // console.log(\"> \", line);\n    // console.log(\"> substring:\", line.substring(start + 1))\n    return buffer;\n}\n\nfunction decode(buffer: Buffer) {\n    try {\n        decoder.decode(buffer);\n    } catch (e) {\n        console.error(e);\n        console.log(\"Last log:\\n\\n\")\n        console.log(lastComment);\n    }\n}\n\ncontents.split(\"\\n\").forEach((line) => {\n    if (line.startsWith(\"#\")) {\n        // reset last comment.\n        if (isCommentBlock === false) { lastComment = \"\"; }\n\n        isCommentBlock = true;\n        lastComment += line.substring(line.indexOf(\":\") + 1) + \"\\n\";\n        return;\n    }\n\n    isCommentBlock = false;\n\n    if (line.startsWith(\"handshake:\") && !decoder) {\n        decoder = Reflection.decode(getBuffer(line));\n\n    } else if (line.startsWith(\"state:\")) {\n        decode(getBuffer(line));\n\n    } else if (line.startsWith(\"patch:\")) {\n        decode(getBuffer(line));\n    }\n});\n\nconsole.log(decoder.state.toJSON());"]}