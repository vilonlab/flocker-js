{"version":3,"file":"Root.js","sourceRoot":"","sources":["../../src/encoder/Root.ts"],"names":[],"mappings":"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","sourcesContent":["import { OPERATION } from \"../encoding/spec\";\nimport { TypeContext } from \"../types/TypeContext\";\nimport { spliceOne } from \"../types/utils\";\nimport { ChangeTree, enqueueChangeTree, setOperationAtIndex } from \"./ChangeTree\";\n\nexport class Root {\n    protected nextUniqueId: number = 0;\n\n    refCount: {[id: number]: number} = {};\n    changeTrees: {[refId: number]: ChangeTree} = {};\n\n    // all changes\n    allChanges: ChangeTree[] = [];\n    allFilteredChanges: ChangeTree[] = [];// TODO: do not initialize it if filters are not used\n\n    // pending changes to be encoded\n    changes: ChangeTree[] = [];\n    filteredChanges: ChangeTree[] = [];// TODO: do not initialize it if filters are not used\n\n    constructor(public types: TypeContext) { }\n\n    getNextUniqueId() {\n        return this.nextUniqueId++;\n    }\n\n    add(changeTree: ChangeTree) {\n        // FIXME: move implementation of `ensureRefId` to `Root` class\n        changeTree.ensureRefId();\n\n        const isNewChangeTree = (this.changeTrees[changeTree.refId] === undefined);\n        if (isNewChangeTree) { this.changeTrees[changeTree.refId] = changeTree; }\n\n        const previousRefCount = this.refCount[changeTree.refId];\n        if (previousRefCount === 0) {\n            //\n            // When a ChangeTree is re-added, it means that it was previously removed.\n            // We need to re-add all changes to the `changes` map.\n            //\n            const ops = changeTree.allChanges.operations;\n            let len = ops.length;\n            while (len--) {\n                changeTree.indexedOperations[ops[len]] = OPERATION.ADD;\n                setOperationAtIndex(changeTree.changes, len);\n            }\n        }\n\n        this.refCount[changeTree.refId] = (previousRefCount || 0) + 1;\n\n        return isNewChangeTree;\n    }\n\n    remove(changeTree: ChangeTree) {\n        const refCount = (this.refCount[changeTree.refId]) - 1;\n\n        if (refCount <= 0) {\n            //\n            // Only remove \"root\" reference if it's the last reference\n            //\n            changeTree.root = undefined;\n            delete this.changeTrees[changeTree.refId];\n\n            this.removeChangeFromChangeSet(\"allChanges\", changeTree);\n            this.removeChangeFromChangeSet(\"changes\", changeTree);\n\n            if (changeTree.filteredChanges) {\n                this.removeChangeFromChangeSet(\"allFilteredChanges\", changeTree);\n                this.removeChangeFromChangeSet(\"filteredChanges\", changeTree);\n            }\n\n            this.refCount[changeTree.refId] = 0;\n\n        } else {\n            this.refCount[changeTree.refId] = refCount;\n\n            //\n            // When losing a reference to an instance, it is best to move the\n            // ChangeTree to the end of the encoding queue.\n            //\n            // This way, at decoding time, the instance that contains the\n            // ChangeTree will be available before the ChangeTree itself. If the\n            // containing instance is not available, the Decoder will throw\n            // \"refId not found\" error.\n            //\n            if (changeTree.filteredChanges !== undefined) {\n                this.removeChangeFromChangeSet(\"filteredChanges\", changeTree);\n                enqueueChangeTree(this, changeTree, \"filteredChanges\");\n            } else {\n                this.removeChangeFromChangeSet(\"changes\", changeTree);\n                enqueueChangeTree(this, changeTree, \"changes\");\n            }\n        }\n\n        changeTree.forEachChild((child, _) => this.remove(child));\n\n        return refCount;\n    }\n\n    removeChangeFromChangeSet(changeSetName: \"allChanges\" | \"changes\" | \"filteredChanges\" | \"allFilteredChanges\", changeTree: ChangeTree) {\n        const changeSet = this[changeSetName];\n        const changeSetIndex = changeSet.indexOf(changeTree);\n\n        if (changeSetIndex !== -1) {\n            changeTree[changeSetName].queueRootIndex = -1;\n            changeSet[changeSetIndex] = undefined;\n            return true;\n        }\n\n        // if (spliceOne(changeSet, changeSet.indexOf(changeTree))) {\n        //     changeTree[changeSetName].queueRootIndex = -1;\n        //     return true;\n        // }\n    }\n\n    clear() {\n        this.changes.length = 0;\n    }\n}\n"]}