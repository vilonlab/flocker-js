{"version":3,"file":"EncodeOperation.js","sourceRoot":"","sources":["../../src/encoder/EncodeOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { OPERATION } from \"../encoding/spec\";\nimport { $changes, $childType, $getByIndex } from \"../types/symbols\";\n\nimport { encode } from \"../encoding/encode\";\n\nimport type { ChangeTree, Ref } from \"./ChangeTree\";\nimport type { Encoder } from \"./Encoder\";\nimport type { Schema } from \"../Schema\";\n\nimport type { Iterator } from \"../encoding/decode\";\nimport type { ArraySchema } from \"../types/custom/ArraySchema\";\nimport type { Metadata } from \"../Metadata\";\n\nexport type EncodeOperation<T extends Ref = any> = (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<T>,\n    index: number,\n    operation: OPERATION,\n    it: Iterator,\n    isEncodeAll: boolean,\n    hasView: boolean,\n    metadata?: Metadata,\n) => void;\n\nexport function encodeValue(\n    encoder: Encoder,\n    bytes: Buffer,\n    type: any,\n    value: any,\n    operation: OPERATION,\n    it: Iterator,\n) {\n    if (typeof (type) === \"string\") {\n        encode[type]?.(bytes, value, it);\n\n    } else if (type[Symbol.metadata] !== undefined) {\n        //\n        // Encode refId for this instance.\n        // The actual instance is going to be encoded on next `changeTree` iteration.\n        //\n        encode.number(bytes, value[$changes].refId, it);\n\n        // Try to encode inherited TYPE_ID if it's an ADD operation.\n        if ((operation & OPERATION.ADD) === OPERATION.ADD) {\n            encoder.tryEncodeTypeId(bytes, type as typeof Schema, value.constructor as typeof Schema, it);\n        }\n\n    } else {\n        //\n        // Encode refId for this instance.\n        // The actual instance is going to be encoded on next `changeTree` iteration.\n        //\n        encode.number(bytes, value[$changes].refId, it);\n    }\n}\n\n/**\n * Used for Schema instances.\n * @private\n */\nexport const encodeSchemaOperation: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<Schema>,\n    index: number,\n    operation: OPERATION,\n    it: Iterator,\n    _: any,\n    __: any,\n    metadata: Metadata,\n) {\n    // \"compress\" field index + operation\n    bytes[it.offset++] = (index | operation) & 255;\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE) {\n        return;\n    }\n\n    const ref = changeTree.ref;\n    const field = metadata[index];\n\n    // TODO: inline this function call small performance gain\n    encodeValue(\n        encoder,\n        bytes,\n        metadata[index].type,\n        ref[field.name],\n        operation,\n        it\n    );\n}\n\n/**\n * Used for collections (MapSchema, CollectionSchema, SetSchema)\n * @private\n */\nexport const encodeKeyValueOperation: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree,\n    index: number,\n    operation: OPERATION,\n    it: Iterator,\n) {\n    // encode operation\n    bytes[it.offset++] = operation & 255;\n\n    // custom operations\n    if (operation === OPERATION.CLEAR) {\n        return;\n    }\n\n    // encode index\n    encode.number(bytes, index, it);\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE) {\n        return;\n    }\n\n    const ref = changeTree.ref;\n\n    //\n    // encode \"alias\" for dynamic fields (maps)\n    //\n    if ((operation & OPERATION.ADD) === OPERATION.ADD) { // ADD or DELETE_AND_ADD\n        if (typeof(ref['set']) === \"function\") {\n            //\n            // MapSchema dynamic key\n            //\n            const dynamicIndex = changeTree.ref['$indexes'].get(index);\n            encode.string(bytes, dynamicIndex, it);\n        }\n    }\n\n    const type = ref[$childType];\n    const value = ref[$getByIndex](index);\n\n    // try { throw new Error(); } catch (e) {\n    //     // only print if not coming from Reflection.ts\n    //     if (!e.stack.includes(\"src/Reflection.ts\")) {\n    //         console.log(\"encodeKeyValueOperation -> \", {\n    //             ref: changeTree.ref.constructor.name,\n    //             field,\n    //             operation: OPERATION[operation],\n    //             value: value?.toJSON(),\n    //             items: ref.toJSON(),\n    //         });\n    //     }\n    // }\n\n    // TODO: inline this function call small performance gain\n    encodeValue(\n        encoder,\n        bytes,\n        type,\n        value,\n        operation,\n        it\n    );\n}\n\n/**\n * Used for collections (MapSchema, ArraySchema, etc.)\n * @private\n */\nexport const encodeArray: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<ArraySchema>,\n    field: number,\n    operation: OPERATION,\n    it: Iterator,\n    isEncodeAll: boolean,\n    hasView: boolean,\n) {\n    const ref = changeTree.ref;\n    const useOperationByRefId = hasView && changeTree.isFiltered && (typeof (changeTree.getType(field)) !== \"string\");\n\n    let refOrIndex: number;\n\n    if (useOperationByRefId) {\n        refOrIndex = ref['tmpItems'][field][$changes].refId;\n\n        if (operation === OPERATION.DELETE) {\n            operation = OPERATION.DELETE_BY_REFID;\n\n        } else if (operation === OPERATION.ADD) {\n            operation = OPERATION.ADD_BY_REFID;\n        }\n\n    } else {\n        refOrIndex = field;\n    }\n\n    // encode operation\n    bytes[it.offset++] = operation & 255;\n\n    // custom operations\n    if (\n        operation === OPERATION.CLEAR ||\n        operation === OPERATION.REVERSE\n    ) {\n        return;\n    }\n\n    // encode index\n    encode.number(bytes, refOrIndex, it);\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE || operation === OPERATION.DELETE_BY_REFID) {\n        return;\n    }\n\n    const type = changeTree.getType(field);\n    const value = changeTree.getValue(field, isEncodeAll);\n\n    // console.log({ type, field, value });\n\n    // console.log(\"encodeArray -> \", {\n    //     ref: changeTree.ref.constructor.name,\n    //     field,\n    //     operation: OPERATION[operation],\n    //     value: value?.toJSON(),\n    //     items: ref.toJSON(),\n    // });\n\n    // TODO: inline this function call small performance gain\n    encodeValue(\n        encoder,\n        bytes,\n        type,\n        value,\n        operation,\n        it\n    );\n}"]}