// src/Application.ts
import uWS from "uWebSockets.js";
import EventEmitter from "events";
import express, { application } from "express";
import { IncomingMessage } from "./IncomingMessage.mjs";
import { ServerResponse } from "./ServerResponse.mjs";
function onAbort(req, res) {
  req.socket.readable = false;
  res.finished = true;
  res.aborted = true;
}
var Application = class extends EventEmitter {
  constructor(uWSApp, opts) {
    super();
    this.uWSApp = uWSApp;
    this.opts = opts;
    // engines: {[ext: string]: EngineCallback} = {};
    // settings: {[setting: string]: any} = {};
    // cache: {[id: string]: any} = {};
    this.listeningSocket = void 0;
    this.request = express.request;
    this.response = express.response;
    uWSApp["delete"] = uWSApp["del"];
    this.init();
  }
  init() {
    application.init.apply(this, arguments);
    this.uWSApp.any("/*", async (uwsResponse, uwsRequest) => {
      const url = uwsRequest.getUrl();
      const req = new IncomingMessage(uwsRequest, uwsResponse, [], this);
      const res = new ServerResponse(uwsResponse, req, this);
      uwsResponse.onAborted(onAbort.bind(void 0, req, res));
      if (req.headers["content-length"]) {
        try {
          await req["readBody"]();
        } catch (e) {
          console.warn("uWebSockets-express: failed reading request body at", url);
        }
      }
      this.handle(req, res);
    });
  }
  handle(req, res, callback) {
    express.application.handle.call(this, req, res, callback);
  }
  lazyrouter() {
    if (!this._router) {
      this._router = express.Router({
        caseSensitive: this.enabled("case sensitive routing"),
        strict: this.enabled("strict routing")
      });
      this._router.use(express.query(this.get("query parser fn")));
      const app = this;
      this._router.use(function expressInit(req, res, next) {
        if (app.enabled("x-powered-by")) res.setHeader("X-Powered-By", "Express");
        req.res = res;
        res.req = req;
        req.next = next;
        res.locals = res.locals || /* @__PURE__ */ Object.create(null);
        next();
      });
    }
    return;
  }
  engine(ext, fn) {
    application.engine.apply(this, arguments);
  }
  set(setting, val) {
    return application.set.apply(this, arguments);
  }
  enable(setting) {
    return application.enable.call(this, setting);
  }
  enabled(setting) {
    return application.enabled.call(this, setting);
  }
  render(name, options, callback) {
    return application.render.apply(this, arguments);
  }
  use(pathOrHandler, ...handlersOrRouters) {
    express.application.use.apply(this, arguments);
    return this;
  }
  get(path, ...handlers) {
    return express.application.get.apply(this, arguments);
  }
  post(path, ...handlers) {
    express.application.post.apply(this, arguments);
    return this;
  }
  patch(path, ...handlers) {
    express.application.patch.apply(this, arguments);
    return this;
  }
  options(path, ...handlers) {
    express.application.options.apply(this, arguments);
    return this;
  }
  put(path, ...handlers) {
    express.application.put.apply(this, arguments);
    return this;
  }
  /**
   * @deprecated
   */
  del(path, ...handlers) {
    return this.delete.apply(this, arguments);
  }
  delete(path, ...handlers) {
    express.application.delete.apply(this, arguments);
    return this;
  }
  head(path, ...handlers) {
    express.application.head.apply(this, arguments);
    return this;
  }
  all(path, ...handlers) {
    express.application.all.apply(this, arguments);
    return this;
  }
  listen(port, cb) {
    this.uWSApp.listen(port, (listenSocket) => {
      this.listeningSocket = listenSocket;
      cb == null ? void 0 : cb();
    });
    const self = this;
    return {
      close() {
        uWS.us_listen_socket_close(self.listeningSocket);
        self.listeningSocket = null;
      }
    };
  }
  defaultConfiguration() {
    application.defaultConfiguration.apply(this);
  }
};
export {
  Application
};
